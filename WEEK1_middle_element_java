package Linkedlist;

// by using Floyd's Cycle Finding Algorithm
// by using Floyd's Cycle Finding Algorithm


class NodeLL {
    int data;
    NodeLL next;
    NodeLL(int new_data)
    {
        this.data =new_data;
        this.next = null;

    }

}
public class MiddleElement {

    public static void main(String[] args) {

        // Create a hard-coded linked list:
        // 10 -> 20 -> 30 -> 40 -> 50 -> 60 -> 70

        NodeLL head = new NodeLL(10);
        head.next =new NodeLL(20);
        head.next.next = new NodeLL(30);
        head.next.next.next = new NodeLL(40);
        head.next.next.next.next = new NodeLL(50);
        head.next.next.next.next.next =new NodeLL(60);
        head.next.next.next.next.next.next =new NodeLL(70);
        printlist(head);

       System.out.println(getmiddle(head));

    }


    static void printlist(NodeLL head)
    {
        while (head!=null)
        {
            System.out.print(" " +head.data);
            head= head.next;

        }

        System.out.println();
    }


    static int getmiddle(NodeLL head){
        // Initialize the slow and fast pointer to the head

        NodeLL slow_ptr =head;
        NodeLL fast_ptr =head;

        while (fast_ptr!=null && fast_ptr.next != null)

        {

            // Move the fast pointer by two nodes

            fast_ptr =fast_ptr.next.next;
            // Move the slow pointer by one node

            slow_ptr = slow_ptr.next;


        }

        // Return the slow pointer which is currently
        // pointing to the middle node of the linked list

        return slow_ptr.data;


    }

}
